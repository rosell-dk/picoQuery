/*
.before()

Description:
  Insert content, specified by the parameter, before each element in the set of matched elements
  http://api.jquery.com/before/

Signatures: 
  .before( content ) => jQuery
      content
        Type: htmlString or Element or Text or Array or jQuery
        HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.

  .before( content, content, ... ) => jQuery

  .before( function ) => jQuery
    function
      Type: Function( Integer index ) => htmlString or Element or Text or jQuery
      A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.

  .before( function-html ) => jQuery
    function-html
      Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery
      A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.

*/
before: function(a) {

  <?php //include('inc/domManip.inc'); ?>

/*
  function DOM_MANIP(collection, args, callback) {
    var l = collection.e.length;
    __ITERATE__(collection.e, function(item, index) {
      var noClone = (l-index-2);
      var arr = (__IS_FUNCTION__(a) ? [a.call(item, index, item.innerHTML)] : __TO_ARRAY__(args));
      __ITERATE__(arr, function(content) {
          if (__IS_STRING__(content) && (content[0] != '<')) {
            callback.call(item, d.createTextNode(content));
          }
          else {
            __ITERATE__($(content).e, function(el) {
              // TODO: Copy event handlers into new clone
              callback.call(item, noClone ? el : el.cloneNode( true ));
            });
          }
      });
    });
  }
*/

  __DOM_MANIP__(this, arguments, function(elem) {
		if ( this.parentNode ) {
			this.parentNode.insertBefore( elem, this );
		}
	});
  return this;
}

// OPTIMIZED_VERSION //
before:function(a,aa,aaa) {
  __DOM_MANIP__(this, arguments, function(b) {
    this.parentNode && this.parentNode.insertBefore(b, this);
  });
  return this;
}
