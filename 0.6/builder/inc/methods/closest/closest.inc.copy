/*
.closest()

Description:
  For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
  http://api.jquery.com/closest/


Fully supported signatures: 
  .closest( selector ) => jQuery
  .closest( selector, context ) => jQuery
  .closest( selection ) => jQuery
  .closest( element ) => jQuery


*/
closest: function(selector, context) {

  console.log('closest()', arguments);
  var arr = this.e.map(function(a){
//    var elm = a['parentNode'];
    var c,elm = a;

    if (context) {
      // The jQuery result may be somewhat surprising. The doc says about context: 
      // A DOM element within which a matching element may be found. 
      // Yet, jQuery ignores context, for elements that are not found in the context

      var c2 = $(context).find(elm);
      if (c2.e[0]) {
        c=c2.e[0].parentNode;
      }
    }
    for (var i=0;i<100;i++) {
      if (c) {
        // In the first attempt, we did this:
        // var $context = $(context).find(elm);
        // the "no hit" case was tested like this:
        // if ($context.e.length == 0) {
        // and our test was like this:
        // if (~$(selector, $context.parent().e[0]).e.indexOf(elm)) {

//        var $context = $(elm, context);

/*    $context = elm.filter(function(searchForItem) {
        return searchInItems.some(function(searchInItem) {
          var node = searchForItem;
          while (node && (node = node.parentNode)) {
            if (node === searchInItem) return true
          }
        });
      });*/

//        if ($context.e.length == 0) {
        if (c == context) {
          console.log('no hit');
          return null;
        }
        // We could test 
//        if (~$(selector, $context.parent().e[0]).e.indexOf(elm)) {
        if (~$(selector, c).e.indexOf(elm)) {
          console.log('hit');
          return elm;
        }
      }
      else {
        if (~$(selector, $(elm).parent().e[0]).e.indexOf(elm)) {
          return elm;
        }
      }
      elm = elm.parentNode;
      if (c) {
        c = c.parentNode;
      }
    }
  });
  arr = arr.filter(function(item,i,r){
    return item && arr.indexOf(item) == i
  });
  // Wrap
  return $(arr);
}

// OPTIMIZED_VERSION //
closest: function(a) {
}
