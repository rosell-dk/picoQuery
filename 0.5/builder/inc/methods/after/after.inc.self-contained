/*
.after()

Description:
   Insert content, specified by the parameter, after each element in the set of matched elements.
   http://api.jquery.com/after/
*/
after: function(a) {
/*  __DOM_MANIP__(this, arguments, function(elem) {
		if ( this.parentNode ) {
			this.parentNode.insertBefore( elem, this.nextSibling );
		}
	});
  return this;
*/
  function insertContent(content, item, target, noClone) {
    if (__IS_STRING__(content) && (content[0] != '<')) {
      item.parentNode.insertBefore(d.createTextNode(content), item);
    }
    else {
      // content may have several nodes, ie ​.before​("​<i>​​</i>​​<p>​​</p>​"​), so we need one more iteration

      // From doc:
      // "If an element selected this way is inserted into a single location elsewhere in the DOM, 
      // it will be moved before the target (not cloned)
      // If there is more than one target element, however, cloned copies of the inserted element
      // will be created for each target except for the last one.
      __ITERATE__($(content).e, function(el) {
//        elem.cloneNode( true ),

        // Note about cloning: [https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode]
        // Cloning a node copies all of its attributes and their values, including intrinsic (in–line)
        // listeners. It does not copy event listeners added using addEventListener() or those assigned
        // to element properties. (e.g. node.onclick = fn)

        // jQuery however preserves event listeners
        /*
   				srcElements = srcElements || getAll( elem );
  				destElements = destElements || getAll( clone );

  				for ( i = 0, l = srcElements.length; i < l; i++ ) {
  					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
  				}
         */

        //  console.log(noClone ? 'no clone' : 'cloning');
console.log('pico inserting:', el, 'before:', target);
        item.parentNode.insertBefore(noClone ? el : el.cloneNode( true ), target);
      });
    }
  }

  var args = __TO_ARRAY__(arguments);
  var l = this.e.length;
  __ITERATE__(this.e, function(item, index) {
    console.log('pico item:', item, 'next:', item.nextSibling);
    if (item.parentNode) {
      var noClone = (l-index-2);
      target = item.nextSibling;
      if (__IS_FUNCTION__(a)) {
        insertContent(a.call(item, index, item.innerHTML), item, target, noClone);
      }
      else {
        __ITERATE__(args, function(content) {
          console.log('pico item:', item, 'next:', item.nextSibling);
          insertContent(content, item, target, noClone);
        });
      };
    }
  });
  return this;

}

// OPTIMIZED_VERSION //
after:function(a,aa,aaa) {
  __DOM_MANIP__(this, arguments, function(b) {
    this.parentNode && this.parentNode.insertBefore(b, this.nextSibling);
  });
  return this;
}
