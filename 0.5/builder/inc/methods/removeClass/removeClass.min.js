// OPTIMIZED_VERSION //
/*
  // Barebone version:
  // - only one class name may be removed at at time
  // - only allows one class name to be specified
  // - may result in unwanted spaces
  // + removes several instances (removes both "a"'s in class="a a b")
//  b.className=b.className.replace(new RegExp("\\b"+a+"\\b","g"),"");

  // Less barebone version:
  // - only one class name may be removed at at time
  // + there will be no unwanted spaces
  // + removes several instances (removes both "a"'s in class="a a b")
  // (trim() is not enough, if we dont want to risk double spaces between class names)
//  b.className=b.className.replace(new RegExp("\\b"+a+"\\b","g"),"").replace(/\s\s/,' ').trim();
//  b.className=b.className.split(" ").filter(function(c){return c!=a;}).join(" ");

  // Alternative version:
  // + several class names can be removed in one go (space seperated)
  // - may result in unwanted spaces
  // + removes several instances (removes both "a"'s in class="a a b")
//  b.className=b.className.replace(new RegExp("\\b"+a.replace(" ","\\b|\\b")+"\\b","g")," ");

  // Deluxe version:
  // + several class names can be removed in one go (space seperated)
  // + there will be no unwanted spaces
  // + removes several instances (removes both "a"'s in class="a a b")
//  b.className=b.className.split(" ").filter(function(c){return!(" "+a+" ").match(' '+c+' ')}).join(" ");
//  b.className=b.className.split(" ").filter(function(c){return 0>a.split(" ").indexOf(c);}).join(" ");

    // Actually, the junk variable-version produces bigger gzip
    // So we do not do this:
    // z='\\b';b.className=b.className.replace(new RegExp(z+a.replace(' ',z+'|'+z)+z,'g'),' ');    

    /* We have two alternative versions:
    b.className=b.className.split(" ").filter(function(c){return!(" "+a+" ").match(' '+c+' ')}).join(" ");
    b.className=b.className.replace(new RegExp("\\b"+a.replace(" ","\\b|\\b")+"\\b","g")," ")

    The "filter" version results in smaller zip, when .filter() is in the build
    otherwise, the second version is smallest.
    BUT! the new alternative filter-version with indexOf is even smaller, so it might always be shortest
    AND! the first version produces extra spaces in className
  <?php if (isFeatureEnabled('filter')):?>
//    b.className=b.className.split(" ").filter(function(c){return!(" "+a+" ").match(' '+c+' ')}).join(" ");
  <?php else:?>
//    b.className=b.className.replace(new RegExp("\\b"+a.replace(" ","\\b|\\b")+"\\b","g")," ")
  <?php endif;?>
    */
/*
Input to Google Closure Compiler:

removeClass: function(a){
  __ITERATE__(this.e, function(b, c){
    if (__IS_UNDEFINED__(a)) {
      // remove all classes
      // b.setAttribute("class", "");
      b.className = "";
    }
    else {
      z = __IS_FUNCTION__(a) ? a.call(null, c, b.className) : a;

      b.className=b.className.split(" ").filter(function(c){
    //    return!(" "+a+" ").match(' '+c+' ')  // 9 bytes longer in gzip
          return 0 > z.split(" ").indexOf(c);
      }).join(" ");

    }
  });
  return this
}
*/
removeClass:function(a) {
  __ITERATE__(<@ this.e @>, <@ function(b, c) {
    a ? (z = __IS_FUNCTION__(<@ a @>) ? a.call(b, c, b.className) : a, b.className = b.className.split(/\s/).filter(function(a) {
      return 0 > z.split(" ").indexOf(a);
    }).join(" ").trim()) : b.className = "";
  } @>);
  return this;
}
/* 
Alternative, using __IS_UNDEFINED__(a)
  removeClass only: 2 bytes longer (620 bytes versus 618 bytes)
  all methods: 1 byte smaller (1730 versus 1371)

removeClass:function(a) {
  __ITERATE__(this.e, function(b, c) {
    __IS_UNDEFINED__(a) ? b.className = "" : (z = __IS_FUNCTION__(a) ? a.call(null, c, b.className) : a, b.className = b.className.split(" ").filter(function(a) {
      return 0 > z.split(" ").indexOf(a);
    }).join(" "));
  });
  return this;
}*/
