/*
.before()

Description:
  Insert content, specified by the parameter, before each element in the set of matched elements
  http://api.jquery.com/before/

Signatures: 
  .before( content ) => jQuery
      content
        Type: htmlString or Element or Text or Array or jQuery
        HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.

  .before( content, content, ... ) => jQuery

  .before( function ) => jQuery
    function
      Type: Function( Integer index ) => htmlString or Element or Text or jQuery
      A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.

  .css( function-html ) => jQuery
    function-html
      Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery
      A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.

*/
before: function(a) {
/*
  if:
    - only one "content" argument
    - no function
    - content isnt plain text (like this: before('plain text') )
    - this.e.length == 0  (meaning that no cloning needed)
    - content only contains one element ("<ul><li></li><li></li></ul>" does, "<li></li><li></li>" doesn't)

  then: we can simply do it like this:

  item = e[0];
  if (item.parentNode) {
    item.parentNode.insertBefore($(a).e[0], item);
  }
  return this;
*/
/*
  if (__IS_FUNCTION__(a)) {
    __ITERATE__(this.e, function(item, index) {
      if (item.parentNode) {
        item.parentNode.insertBefore($(a.call(item, index, item)).e[0], item);
      }
    });
    
  }
  else {
    var e = this.e;
    __ITERATE__(__TO_ARRAY__(arguments), function(content) {
      __ITERATE__(e, function(item) {
        var referenceNode = item;
        if (referenceNode.parentNode) {
          var newContent = $(content).e[0];
          referenceNode.parentNode.insertBefore(newContent, referenceNode);
        }
      });
    });
  }
  return this;
*/
  // TODO: Consider creating a _DOM_MANIP_ helper similar to jQuery domManip
  // This way it will be easier to maintain prepend(), append(), appendTo() etc.
  // BTW: .before() is currently the most compliant of these
  /* jQuery does it like this:
  	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},
  */
  function insertContent(content, item, noClone) {
    if (__IS_STRING__(content) && (content[0] != '<')) {
      item.parentNode.insertBefore(d.createTextNode(content), item);
    }
    else {
      // content may have several nodes, ie ​.before​("​<i>​​</i>​​<p>​​</p>​"​), so we need one more iteration

      // From doc:
      // "If an element selected this way is inserted into a single location elsewhere in the DOM, 
      // it will be moved before the target (not cloned)
      // If there is more than one target element, however, cloned copies of the inserted element
      // will be created for each target except for the last one.
      __ITERATE__($(content).e, function(el) {
//        elem.cloneNode( true ),

        // Note about cloning: [https://developer.mozilla.org/en/docs/Web/API/Node/cloneNode]
        // Cloning a node copies all of its attributes and their values, including intrinsic (in–line)
        // listeners. It does not copy event listeners added using addEventListener() or those assigned
        // to element properties. (e.g. node.onclick = fn)

        // jQuery however preserves event listeners
        /*
   				srcElements = srcElements || getAll( elem );
  				destElements = destElements || getAll( clone );

  				for ( i = 0, l = srcElements.length; i < l; i++ ) {
  					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
  				}
         */

        //  console.log(noClone ? 'no clone' : 'cloning');

        item.parentNode.insertBefore(noClone ? el : el.cloneNode( true ), item);
      });
    }
  }

  var args = __TO_ARRAY__(arguments);
  var l = this.e.length;
  __ITERATE__(this.e, function(item, index) {
    if (item.parentNode) {
      var noClone = (l-index-2);
      if (__IS_FUNCTION__(a)) {
        insertContent(a.call(item, index, item.innerHTML), item, noClone);
      }
      else {
        __ITERATE__(args, function(content) {
          insertContent(content, item, noClone);
        });
      };
    }
  });
  return this;
}

// OPTIMIZED_VERSION //
before:function(e) {
  function f(a, b, c) {
    __IS_STRING__(a) && "<" != a[0] ? b.parentNode.insertBefore(d.createTextNode(a), b) : __ITERATE__($(a).e, function(a) {
      b.parentNode.insertBefore(c ? a : a.cloneNode(!0), b);
    });
  }
  var g = __TO_ARRAY__(arguments), h = this.e.length;
  __ITERATE__(this.e, function(a, b) {
    if (a.parentNode) {
      var c = h - b - 2;
      __IS_FUNCTION__(e) ? f(e.call(a, b, a.innerHTML), a, c) : __ITERATE__(g, function(b) {
        f(b, a, c);
      });
    }
  });
  return this;
}
